# Vidto

import time

####################################################################################################
def NormalizeURL(url):

	return url.replace('embed-', '').replace('.html', '')
	
####################################################################################################
def MetadataObjectForURL(url):

	page = HTTP.Request(url, cacheTime=30).content

	title = Regex(r'<META NAME=\"description\" CONTENT=\"(.*)\">').search(page).group(1).replace('Watch video ', '')
	
	return VideoClipObject(
		title = title,
		#thumb = thumb_url
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			video_resolution = 'sd',
			audio_channels = 2,
			optimized_for_streaming = False,
			parts = [
				PartObject(key=Callback(PlayVideo, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayVideo(url):
	
	page = HTTP.Request(url, cacheTime=30).content
	
	wait = Regex('<span id=\"countdown_str\">Wait <span id=\"cxc\">(\d*)</span>').search(page).group(1)
	time.sleep(int(wait) + 1)
	
	post_values = {}
	
	for item in Regex(r'<input type=\"hidden\" name=\"(.*?)\" value=\"(.*?)\"').finditer(page):
		name = item.group(1)
		value = item.group(2)
		post_values[name] = value
			

	page = HTTP.Request(url, values=post_values, method='POST').content

	video_url = Regex('\[{file:"(http:\/\/.*?\.mp4)"').search(page).group(1)
	Log.Debug('Play file: ' + video_url)
	
	return IndirectResponse(VideoClipObject, key=video_url)


